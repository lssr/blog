// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/home/luis/miniconda3/envs/fenics/include', '/ho
//                                  me/luis/miniconda3/envs/fenics/include/eigen3', '/
//                                  home/luis/miniconda3/envs/fenics/include']
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise::ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise::~ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.1125, 0.06296959027241358, 0.06296959027241358, 0.06296959027241358, 0.06619707639425308, 0.06619707639425308, 0.06619707639425308 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D01_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE12_C0_Q7[1][7][3] =
        { { { 0.3333333333333334, 0.3333333333333333, 0.3333333333333333 },
            { 0.1012865073234565, 0.7974269853530872, 0.1012865073234563 },
            { 0.1012865073234565, 0.1012865073234564, 0.7974269853530871 },
            { 0.7974269853530873, 0.1012865073234563, 0.1012865073234563 },
            { 0.4701420641051152, 0.05971587178976979, 0.4701420641051151 },
            { 0.4701420641051152, 0.4701420641051151, 0.05971587178976974 },
            { 0.05971587178976993, 0.4701420641051151, 0.4701420641051151 } } };
    alignas(32) static const double FE3_C0_D01_Q7[1][7][5] =
        { { { -0.3333333333333383, 0.333333333333335, 1.33333333333332, 0.0, -1.333333333333334 },
            { 0.594853970706169, -0.5948539707061739, 3.189707941412334, 0.0, -3.189707941412351 },
            { 0.5948539707061686, 2.189707941412351, 0.4051460292938089, -2.784561912118513, -0.4051460292938243 },
            { -2.189707941412354, -0.5948539707061744, 0.4051460292938146, 2.784561912118532, -0.4051460292938242 },
            { -0.8805682564204661, 0.8805682564204621, 0.238863487159067, 0.0, -0.2388634871590788 },
            { -0.8805682564204651, -0.7611365128409209, 1.880568256420448, 1.641704769261392, -1.880568256420461 },
            { 0.7611365128409149, 0.8805682564204622, 1.880568256420445, -1.64170476926137, -1.880568256420461 } } };
    alignas(32) static const double FE3_C0_D10_Q7[1][7][5] =
        { { { -0.3333333333333328, 0.3333333333333328, 1.333333333333331, -1.333333333333331, 0.0 },
            { 0.5948539707061766, 2.189707941412349, 0.4051460292938243, -0.4051460292938243, -2.784561912118526 },
            { 0.5948539707061734, -0.5948539707061753, 3.189707941412344, -3.189707941412344, 0.0 },
            { -2.18970794141235, -0.5948539707061775, 0.4051460292938239, -0.4051460292938239, 2.784561912118527 },
            { -0.8805682564204611, -0.7611365128409219, 1.880568256420458, -1.880568256420458, 1.641704769261383 },
            { -0.8805682564204599, 0.8805682564204588, 0.2388634871590775, -0.2388634871590775, 0.0 },
            { 0.7611365128409214, 0.8805682564204604, 1.880568256420457, -1.880568256420457, -1.641704769261382 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[2] * FE12_C0_D01_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[5] * FE12_C0_D01_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[4] * FE12_C0_D01_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[3] * FE12_C0_D01_Q7[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[2] * FE12_C0_D01_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[5] * FE12_C0_D01_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[4] * FE12_C0_D01_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE12_C0_D01_Q7[0][0][0] + coordinate_dofs[3] * FE12_C0_D01_Q7[0][0][1];
    alignas(32) double sp[11];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = J_c0 * J_c3;
    sp[8] = J_c1 * J_c2;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = std::abs(sp[9]);
    alignas(32) double BF0[3] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w0_d1_c1 = w[0][6] * FE3_C0_D01_Q7[0][iq][0] + w[0][8] * FE3_C0_D01_Q7[0][iq][1] + w[0][9] * FE3_C0_D01_Q7[0][iq][2] + w[0][10] * FE3_C0_D01_Q7[0][iq][3] + w[0][11] * FE3_C0_D01_Q7[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE3_C0_D10_Q7[0][iq][0] + w[0][7] * FE3_C0_D10_Q7[0][iq][1] + w[0][9] * FE3_C0_D10_Q7[0][iq][2] + w[0][10] * FE3_C0_D10_Q7[0][iq][3] + w[0][11] * FE3_C0_D10_Q7[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE3_C0_D10_Q7[0][iq][0] + w[0][1] * FE3_C0_D10_Q7[0][iq][1] + w[0][3] * FE3_C0_D10_Q7[0][iq][2] + w[0][4] * FE3_C0_D10_Q7[0][iq][3] + w[0][5] * FE3_C0_D10_Q7[0][iq][4];
        const double w0_d1_c0 = w[0][0] * FE3_C0_D01_Q7[0][iq][0] + w[0][2] * FE3_C0_D01_Q7[0][iq][1] + w[0][3] * FE3_C0_D01_Q7[0][iq][2] + w[0][4] * FE3_C0_D01_Q7[0][iq][3] + w[0][5] * FE3_C0_D01_Q7[0][iq][4];
        alignas(32) double sv7[29];
        sv7[0] = w0_d1_c1 * sp[3];
        sv7[1] = w0_d0_c1 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = sv7[2] + sv7[2];
        sv7[4] = w0_d0_c0 * sp[5];
        sv7[5] = w0_d1_c0 * sp[6];
        sv7[6] = sv7[4] + sv7[5];
        sv7[7] = sv7[6] + sv7[6];
        sv7[8] = sv7[3] / 2 + sv7[7] / 2;
        sv7[9] = 54807.6923076923 * sv7[8] + 73076.92307692308 * (sv7[3] / 2);
        sv7[10] = 54807.6923076923 * sv7[8] + 73076.92307692308 * (sv7[7] / 2);
        sv7[11] = sv7[9] + sv7[10];
        sv7[12] = sv7[9] + -1 * (0.3333333333333333 * sv7[11]);
        sv7[13] = sv7[12] * sv7[12];
        sv7[14] = w0_d1_c0 * sp[3];
        sv7[15] = w0_d0_c0 * sp[4];
        sv7[16] = sv7[14] + sv7[15];
        sv7[17] = w0_d0_c1 * sp[5];
        sv7[18] = w0_d1_c1 * sp[6];
        sv7[19] = sv7[17] + sv7[18];
        sv7[20] = sv7[16] + sv7[19];
        sv7[21] = 73076.92307692308 * (sv7[20] / 2) * (73076.92307692308 * (sv7[20] / 2));
        sv7[22] = sv7[13] + sv7[21];
        sv7[23] = sv7[10] + -1 * (0.3333333333333333 * sv7[11]);
        sv7[24] = sv7[23] * sv7[23];
        sv7[25] = sv7[24] + sv7[21];
        sv7[26] = sv7[22] + sv7[25];
        sv7[27] = std::sqrt(1.5 * sv7[26]);
        sv7[28] = sp[10] * sv7[27];
        const double fw0 = sv7[28] * weights7[iq];
        for (int i = 0; i < 3; ++i)
            BF0[i] += fw0 * FE12_C0_Q7[0][iq][i];
    }
    std::fill(A, A + 3, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i] += BF0[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise()
{
  return new ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise();
}


ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::~ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main()
{
    // Do nothing
}

const char * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::signature() const
{
    return "486614f2d9ad06fdd8556d964070bec5c72c35859995873aca2f633799271aeb567636732bc2b5e5b0fd11c57898e86ca688de8c4f2734700b4981aa95f3d79a";
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::num_coefficients() const
{
    return 1;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_a2ed87300e08ce1296b554d0cd26184a5618a4a8_finite_element_main();
}

ufc::dofmap * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_a2ed87300e08ce1296b554d0cd26184a5618a4a8_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_440fd17cedac0e47bcccc5efa4209130f9267952_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_c6d46772b365b3e3d8343c64aa0d2d48ef1107b8_finite_element_main();
    case 1:
        return create_ffc_element_50cd5df41957cac2d50f67744339be91faee216c_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_c6d46772b365b3e3d8343c64aa0d2d48ef1107b8_dofmap_main();
    case 1:
        return create_ffc_element_50cd5df41957cac2d50f67744339be91faee216c_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_cell_integral() const
{
    return create_ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main()
{
  return new ffc_form_83e3ad2335ff032bc08e7f8df443665c85040bd5_form_main();
}

