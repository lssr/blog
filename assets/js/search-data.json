{
  
    
        "post0": {
            "title": "2D Linear Elasticity",
            "content": "from __future__ import print_function import region_selector_2d as rs from fenics import * from mshr import * import numpy as np import random import matplotlib.pyplot as plt . length = 15.0 # [mm] thickness = 3.0 # [mm] resolution = 2 # [Nodes/mm] resX = int(resolution*length) # N_elements_x = N_nodes_x - 1 resY = int(resolution * thickness)# N_elements_y = N_nodes_y - 1 delta_x = length/(resX+1) delta_y = thickness/(resY+1) . geom = Rectangle(Point(0.0, 0.0), Point(length, thickness)) eps = 0.001 geom -= Rectangle(Point(0.0, delta_y+eps), Point(3*delta_x, 2*delta_y-eps)) geom -= Rectangle(Point(0.0, thickness-2*delta_y+eps), Point(3*delta_x, thickness-1*delta_y-eps)) geom -= Rectangle(Point(delta_x, 3*delta_y+eps), Point(4*delta_x, 4*delta_y-eps)) for c_x in range(5,resX,2): geom -= Rectangle(Point(c_x*delta_x+eps, 1*delta_y+eps), Point((c_x+1)*delta_x-eps, thickness-1*delta_y-eps)) for c_x in range(6,resX+1,4): geom -= Rectangle(Point(c_x*delta_x-eps, 3*delta_y+eps), Point((c_x+1)*delta_x+eps, 4*delta_y-eps)) mesh = generate_mesh(geom, 30) plt.figure(figsize=(10,2)) plot(mesh, color=&#39;b&#39;) plt.margins(0.1) plt.xlabel(&quot;x [mm]&quot;) plt.ylabel(&quot;y [mm]&quot;) plt.show() . fixed_region_lower = rs.GetLinearBoundary.from_points(Point(0.0,0.0), Point(0.0,delta_y)) fixed_region_upper = rs.GetLinearBoundary.from_points(Point(0.0,thickness-delta_y), Point(0.0,thickness)) boundaries = MeshFunction(&#39;size_t&#39;, mesh, mesh.topology().dim()-1) . V = VectorFunctionSpace(mesh, &quot;Lagrange&quot;, 2) du = TrialFunction(V) u = Function(V, name=&quot;Displacement&quot;) v = TestFunction(V) . bc_1 = DirichletBC(V, Constant((0.0,0.0)), fixed_region_lower) bc_2 = DirichletBC(V, Constant((0.0,0.0)), fixed_region_upper) bc = [bc_1, bc_2] . def eps(u): return sym(grad(u)) def sigma(u,E): nu = 0.3 mu = E / (2.0 * (1.0 + nu)) lmbda = E*nu / ((1.0 + nu) * (1.0-2.0*nu)) return lmbda*tr(eps(u))*Identity(mesh.topology().dim()) + 2.0*mu*eps(u) . batch_it = 1 simulation_iter = 50 u_x = np.zeros([resY+2,resX+2,simulation_iter]) u_y = np.zeros([resY+2,resX+2,simulation_iter]) load_data = np.empty([simulation_iter,5]) for it in range(simulation_iter): #print(f&#39;Iteration: {it}&#39;) point_x = random.random()*length point_y = thickness #point_y = random.random()*thickness loadRegion = rs.GetLinearBoundary.from_points(Point(point_x-0.4, point_y), Point(point_x+0.4, point_y)) boundaries.set_all(0) fixed_region_lower.mark(boundaries, 1) fixed_region_upper.mark(boundaries, 1) loadRegion.mark(boundaries, 2) ds = Measure(&#39;ds&#39;, domain=mesh, subdomain_data=boundaries) load_x = random.random()*2000.0 - 1000.0 load_y = random.random()*2000.0 - 1000.0 E = np.random.choice(14,1)[0]*5000.0 + 70000.0 load_data[it,:] = np.array([E, point_x, point_y, load_x, load_y]) load = Constant((load_x,load_y)) # [N/mm] a = inner(sigma(du,E), eps(v))*dx L = dot(load,v)*ds(2) solve(a == L, u, bc) for x in range(resX+2): for y in range(resY+2): u_xy = u(x*delta_x, y*delta_y) u_x[y,x,it] = u_xy[0] u_y[y,x,it] = u_xy[1] . def plot_result(u, u_title): if not u.ufl_shape: p = plot(u, cmap=&#39;coolwarm&#39;, title=&#39;Displacement &#39;+u_title) else: p = plot(u, mode=&#39;displacement&#39;, cmap=&#39;coolwarm&#39;, title=&#39;Displacement &#39;+u_title) plt.colorbar(p) plt.xlabel(&quot;x [mm]&quot;) plt.ylabel(&quot;y [mm]&quot;) plt.figure(figsize=(10,10)) plt.subplot(3,1,1) plot_result(u, &quot;$u$&quot;) plt.subplot(3,1,2) plot_result(dot(u, Constant((1,0))), &quot;$u_x$&quot;) plt.subplot(3,1,3) plot_result(u.sub(1), &quot;$u_y$&quot;) plt.show() .",
            "url": "https://lssr.github.io/blog/2020/10/20/2D-linear-elasticity.html",
            "relUrl": "/2020/10/20/2D-linear-elasticity.html",
            "date": " • Oct 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lssr.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lssr.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}